# -*- coding: utf-8 -*-
from __future__ import unicode_literals

# Create your views here.

import poplib
import socket
import time
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth import get_user_model, authenticate, login, logout
from django.contrib import messages
from django.urls import reverse
from django.shortcuts import render
from django.views import View
from . forms import LoginForm, SignupForm
from django.db import IntegrityError

class LoginView(View):
	form_class = LoginForm
	initial = {}
	template_name = 'core/login.html'

	def get(self, request, *args, **kwargs):
		if request.user.is_authenticated: #Already logged in
			return HttpResponseRedirect(reverse('core:login_success'))
		else:
			form = self.form_class(initial=self.initial)
			return render(request, self.template_name, {'form':form})

	def post(self, request, *args, **kwargs):
		if request.user.is_authenticated: #Already logged in
			return HttpResponseRedirect(reverse('core:login_success'))
		else:
			form = self.form_class(request.POST)
			if form.is_valid():
				# Get the data
				webmail = form.cleaned_data.get('webmail')
				password = form.cleaned_data.get('password')

				#Get user object
				try:
					user = get_user_model().objects.get(webmail=webmail)
				except get_user_model().DoesNotExist: #New User
					#Redirect to Sign Up Page with a message
					messages.error(request, "Are you a new user? Please sign up.")
					return HttpResponseRedirect(reverse('core:signup'))
				
				#Authenticate
				try:
					user = authenticate(request, webmail=user.webmail, mail_server=user.mail_server, password=password)
					if user is not None:
						login(request, user)
						# Redirect to login_success
						return HttpResponseRedirect(reverse('core:login_success'))
					else:
						messages.error(request, "Authentication Failed. Try again later.")
						return HttpResponseRedirect(reverse('core:login'))
				except (poplib.error_proto, socket.error) as e:
					s = e.message
					if s=="-ERR Authentication failed." or s=="-ERR EOF": #poplib
						s = "Username or Password Incorrect"
					elif s=="timed out": #socket
						s = "Connection Timed Out. Try Again Later."
					messages.error(request, s)
					return HttpResponseRedirect(reverse('core:login'))

			else: # If form is not valid
				# Render the form, along with the errors generated by is_valid()
				return render(request, self.template_name, {'form':form})



class SignupView(View):
	form_class = SignupForm
	initial = {}
	template_name = 'core/signup.html'

	def get(self, request, *args, **kwargs):
		if request.user.is_authenticated:
			messages.error(request, "Signup is disabled when someone is logged in. Please logout.")
			return HttpResponseRedirect(reverse('core:login_success'))

		else: #If nobody is logged in, render the form
			form = self.form_class(initial=self.initial)
			return render(request, self.template_name, {'form':form})

	def post(self, request, *args, **kwargs):
		form = self.form_class(request.POST)
		if form.is_valid():
			# Get the data
			webmail = form.cleaned_data.get('webmail')
			password = form.cleaned_data.get('password')
			mail_server = form.cleaned_data.get('mail_server')
			first_name = form.cleaned_data.get('first_name')
			last_name = form.cleaned_data.get('last_name')

			# Create user object
			try:
				# The below syntax might look funny but its perfectly correct
				get_user_model()(webmail=webmail, mail_server=mail_server, first_name=first_name, last_name=last_name).save()
				new_user = get_user_model().objects.get(webmail=webmail)
				try: 
					user = authenticate(request, webmail=new_user.webmail, mail_server=new_user.mail_server, password=password)
					# Using new_user.webmail expresses the intent of the code more clearly than below way of calling authenticate
					# user = authenticate(request, webmail=webmail, mail_server=mail_server, password=password)
					if user is not None:
						# Redirect to signup_success
						return HttpResponseRedirect(reverse('core:signup_success'))
				except (poplib.error_proto, socket.error) as e:
					#Delete the new_user object from database
					new_user.delete()
					s = e.message
					if s=="-ERR Authentication failed." or s=="-ERR EOF": #poplib
						s = "Username or Password Incorrect"
					elif s=="timed out": #socket
						s = "Connection Timed Out. Try Again Later."
					messages.error(request, s)
					return HttpResponseRedirect(reverse('core:signup'))
				#Need to make sure new_user gets deleted whenever any exception is called.
				#Thats why we are handling all exceptions using "Exception"
				except Exception as e: 
					#Delete the new_user object from database
					new_user.delete()
					s = e.message
					messages.error(request, s)
					return HttpResponseRedirect(reverse('core:signup'))
			except IntegrityError: 
				messages.error(request, "User with given webmail already exists")
				return HttpResponseRedirect(reverse('core:signup'))
		else: # If form is not valid
			# Render the form, along with the errors generated by is_valid()
			return render(request, self.template_name, {'form':form})


class LogoutView(View):
	def get(self, request, *args, **kwargs):
		logout(request)
		messages.error(request, "You have been logged out. Login again to continue.")
		return HttpResponseRedirect(reverse('core:login'))

class LoginSuccessView(View):
	def get(self, request, *args, **kwargs):
		time.sleep(1)
		if request.user.is_authenticated:
			messages.info(request, "You are logged in as "+request.user.get_short_name())
			return render(request, 'core/login_success.html')
		else:
			redirect_to = reverse('core:login')
			text = "You are not logged in. Redirecting to login page."
			context = {'next':redirect_to, 'text':text}	
			return render(request, 'core/login_success.html', context=context)

class SignupSuccessView(View):
	def get(self, request, *args, **kwargs):
		time.sleep(1)
		#There is javascript in signup_success.html which,
		#Will redirect to login
		return render(request, 'core/signup_success.html')