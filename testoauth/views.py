# -*- coding: utf-8 -*-
from __future__ import unicode_literals

# Create your views here.

import poplib
import socket
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth import get_user_model, authenticate, login, logout
from django.contrib import messages
from django.urls import reverse
from django.shortcuts import render
from django.views import View
from . forms import LoginForm, SignupForm
from django.db import IntegrityError

class LoginView(View):
	form_class = LoginForm
	initial = {}
	template_name = 'testoauth/login.html'

	def get(self, request, *args, **kwargs):
		if request.user.is_authenticated: #Already logged in
			messages.info(request, "You are already logged in as "+request.user.get_full_name())
			return HttpResponseRedirect(reverse('login'))
		form = self.form_class(initial=self.initial)
		return render(request, self.template_name, {'form':form})

	def post(self, request, *args, **kwargs):
		if request.user.is_authenticated: #Already logged in
			messages.info(request, "You are already logged in as "+request.user.get_full_name())
			return HttpResponseRedirect(reverse('login'))

		form = self.form_class(request.POST)
		if form.is_valid():
			# Get the data
			webmail = form.cleaned_data.get('webmail')
			password = form.cleaned_data.get('password')

			#Get user object
			try:
				user = get_user_model().objects.get(webmail__contains=webmail)
			except get_user_model().DoesNotExist: #New User
				#Redirect to Sign Up Page with a message
				# messages.error(request, "Are you a new user? Please Sign up.")
				# return HttpResponseRedirect("Sign Up URL")
				s = '''
				<html><body style="text-align:center"><h1>
				<br/><br/><br/><br/><br/><br/><br/><br/>
				Is this your first time?
				</h1></body></html>
				'''
				return HttpResponse(s)
			
			#Authenticate
			try:
				user = authenticate(request, webmail=user.webmail, mail_server=user.mail_server, password=password)
				if user is not None:
					login(request, user)
					# Redirect to a success page.
					# return HttpResponseRedirect("Wherever user needs to go after login. Possibly back to the the client who sent him here for oauth.")
					s = '''
					<html><body style="text-align:center"><h1>
					<br/><br/><br/><br/><br/><br/><br/><br/>
					Logged in.	
					</h1></body></html>
					'''
					return HttpResponse(s)
				else:
					messages.error(request, "Authentication Failed. Try again later.")
					return HttpResponseRedirect(reverse('login'))
			except (poplib.error_proto, socket.error) as e:
				s = e.message
				if e.message == "-ERR Authentication failed.": #poplib
					s = "Username or Password Incorrect"
				elif e.message=="-ERR EOF": #poplib
					s = "Username or Password incorrect"
				elif e.message=="timed out": #socket
					s = "Connection Timed Out. Try Later."
				messages.error(request, s)
				return HttpResponseRedirect(reverse('login'))

		else: # If form is not valid
			# Render the form, along with the errors generated by is_valid()
			return render(request, self.template_name, {'form':form})



class SignupView(View):
	form_class = SignupForm
	initial = {}
	template_name = 'testoauth/signup.html'

	def get(self, request, *args, **kwargs):
		form = self.form_class(initial=self.initial)
		return render(request, self.template_name, {'form':form})

	def post(self, request, *args, **kwargs):
		form = self.form_class(request.POST)
		if form.is_valid():
			# Get the data
			webmail = form.cleaned_data.get('webmail')
			password = form.cleaned_data.get('password')
			mail_server = form.cleaned_data.get('mail_server')
			first_name = form.cleaned_data.get('first_name')
			last_name = form.cleaned_data.get('last_name')

			# Create user object
			# The below syntax might look funny but its perfectly correct
			try:
				get_user_model()(webmail=webmail, mail_server=mail_server, first_name=first_name, last_name=last_name).save()
				new_user = get_user_model().objects.get(webmail__contains=webmail)
				try: 
					user = authenticate(request, webmail=webmail, mail_server=mail_server, password=password)
					if user is not None:
						#Signup success, redirect to signup success page
						# return HttpResponseRedirect(reverse('Signup Success'))
						s = '''
						<html>
						<head><script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script></head>
						<body>
						<script>
						$( document ).ready(function() {
							setTimeout(function(){ window.location.href=\"http://127.0.0.1:8000%s\" }, 2500);
						});
						</script>
						<h1 style='text-align:center'>
						<br/><br/><br/><br/><br/><br/><br/><br/>
						Signup Success. Redirecting. Please Wait.
						</h1>
						</html>
						''' % reverse('login')
						return HttpResponse(s)
				except (poplib.error_proto, socket.error) as e:
					#Delete the new_user object from database
					new_user.delete()
					s = e.message
					if e.message == "-ERR Authentication failed.": #poplib
						s = "Username or Password incorrect"
					elif e.message=="-ERR EOF": #poplib
						s = "Username or Password incorrect"
					elif e.message=="timed out": #socket
						s = "Connection timed out. Try later."
					messages.error(request, s)
					return HttpResponseRedirect(reverse('signup'))
				#Need to make sure new_user gets deleted whenever any exception is called.
				#Thats why we are handling all exceptions using "Exception"
				except Exception as e: 
					#Delete the new_user object from database
					new_user.delete()
					s = e.message
					messages.error(request, s)
					return HttpResponseRedirect(reverse('signup'))
			except IntegrityError: 
				messages.error(request, "User with given webmail already exists")
				return HttpResponseRedirect(reverse('signup'))
		else: # If form is not valid
			# Render the form, along with the errors generated by is_valid()
			return render(request, self.template_name, {'form':form})


class LogoutView(View):
	def get(self, request, *args, **kwargs):
		logout(request)
		messages.error(request, "You have been logged out. Login again to continue.")
		return HttpResponseRedirect(reverse('login'))

