Testoauth Shorthand Docs

Apps
	Nothing new added. Its just django's autogenerated apps file.

Admin
	Nothing new added. Its just django's autogenerated admin file.

Forms
	We use the material, material-frontend and material-admin apps for Frontend UI.
	Forms module imports, "from material import Layout, Fieldset, Row"
	We use the layouts to simplify the task of organizing form fields in html. The app also adds css to the ui, converting it from a vanilla html form to a pretty one. 
	LoginForm
		webmail - charfield of max_length 50
		password - charfield with password-input widget
	SignupForm
		webmail - charfield of max_length 50
		password - charfield with password-input widget
		mail-server - choicefield with all 5 mail servers as choices
		firstname - charfield of max_length 50
		lastname - charfield of max_length 50
		Note : 
			We dont have a confirm password field because the user is not really setting up a password. He is just entering his webmail password. 
			Which leads to the question - "In that case, why does he need to enter the password at all?". If we dont ask for password at signup, then anybody who knows his webmail id and mail server can sign him up - which is a nuisance to the system at the least and a security risk at worst. 
	LoginForm.clean() and SignupForm.clean()
			The user might enter the webmail in many forms. "user@iitg.ernet.in", "user@iitg.ac.in", "user". 
			Thus, we need to sanitize them. We do this in Forms, so that the Views can work as if there was no confusion at all. Views will always get "user". 
			So all actions to database - creating, accessing, modifying and deleting - work with "user"

Tests
	Need to write tests.

Urls
	The urls file is extremely simple, and thus, there is no need for any sort of documentation to explain the same.
	In fact, any sort of documentation would contain more lines of text than the lines of code itself, while not adding any new information.

Views
	We use the material, material-frontend and material-admin apps for Frontend UI.
	LoginView
		Works with LoginForm and login.html
		get()
			if user is already logged in, 
				redirect to login_success url
			else(if user not logged in),
				create an unbound LoginForm and render it using login.html

		post()
			if user is already logged in, 
				redirect to url login_success url
			else(if user not logged in),
				create a form object using the POST data.
				if the form is valid, 
					try 
						to get the user object from webmail
					DoesNotExist 
						send a error message "Are you a new user? Please sign up." and redirect to signup url
					try 
						to authenticate the user
						if user exists, log the user in and redirect to login_success url
						else, send and error message "Authentication Failed. Try again later." and redirect back to login
					poplib.error_proto, socket.error
						get the error message
						if message is "-ERR Authentication failed." or "-ERR EOF" - change message to "Username or Password Incorrect"
						if message is "timed out" - change message to "Connection Timed Out. Try Again Later."
						send message as error message
						redirect to login url
				else(if the form is not valid),
					render the form using login.html, and it will display why the form is not valid

	SignupView
		Works with SignupForm and signup.html
		get()
			if someone is logged in,
				send a message that new user cannot sign up when someone is logged in and
				redirect to login_success
			else,
				create an unbound SignupForm and render it using signup.html

		post()
			create a form object using the POST data.
			if the form is valid, 
				try	
					to create user object with given webmail, mail_server, first_name and last_name and save it to database
					try 
						to authenticate the new user(to verify the password)
						if user exists, redirect to signup_success url
					poplib.error_proto, socket.error
						delete the new user from database
						get the error message
						if message is "-ERR Authentication failed." or "-ERR EOF" - change message to "Username or Password Incorrect"
						if message is "timed out" - change message to "Connection Timed Out. Try Again Later."
						send message as error message
						redirect to signup url
					Exception
						delete the new user from database
						send message as error message
						redirect to signup url
				django.db.IntegrityError
					send error message "User with given webmail already exists"
					redirect to signup url
			else(if the form is not valid),
				render the form using signup.html, and it will display why the form is not valid


	LogoutView
		get()
			logout the user
			send an error message "You have been logged out. Login again to continue."
			redirect to login url

	LoginSuccessView
		get()
			time.sleep for a second
			if user is logged in
				send a info message, "You are logged in as <user>"
				render login_success.html
			else(if user is not logged in),
				render login_success.html with the text "You are not logged in. Redirecting to login page." and url of 'login' as context variables

	SignupSuccessView
		get()
			time.sleep for one second
			render signup_success.html


